{"version":3,"sources":["webpack:///../src/components/BuildStatusBadge.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","BuildStatusBadge","of","isMDXComponent"],"mappings":"+QAUaA,G,UAAe,S,qNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,QAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,0CACA,kBACE,GAAM,eADR,eAGA,8GACA,qIACA,iIACA,kBACE,GAAM,SADR,SAGA,uBAAK,oBAAMC,WAAW,MAClB,UAAa,gBADZ,mEAIL,qHACA,kBACE,GAAM,6BADR,6BAGA,uGACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,gPAAiPC,SAAO,GACzRL,QACAH,kBACAS,eACAC,UACAC,sBALyR,gBAMzRX,IANyR,EAOzRH,eAPyR,GAQxRO,QAAQ,cACb,YAAC,IAAD,CAAkBA,QAAQ,oBAA1B,oMAKE,4GAIA,uBACA,uBACA,qBAAG,kBAAIC,WAAW,KAAf,2EACH,kBACE,GAAM,qCADR,uCAGA,wEACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,yIAA0IC,SAAO,GAClLL,QACAH,kBACAS,eACAC,UACAC,sBALkL,gBAMlLX,IANkL,EAOlLH,eAPkL,GAQjLO,QAAQ,cACb,YAAC,IAAD,CAAkBA,QAAQ,oBAA1B,gGAIE,4GAIA,kBACE,GAAM,eADR,eAGA,4EACA,uBAAK,oBAAMC,WAAW,MAClB,UAAa,gBADZ,8NAQL,4GAA2F,0BAAYA,WAAW,KAAvB,QAA3F,KAAiJ,0BAAYA,WAAW,KAAvB,OAAjJ,SAA0M,0BAAYA,WAAW,KAAvB,OAA1M,kCACA,kBACE,GAAM,SADR,SAGA,YAAC,IAAD,CAAOO,GAAID,IAAkBP,QAAQ,UACrC,8BACE,iBAAGC,WAAW,cAAd,iDAEF,kBACE,GAAM,yBADR,yBAGA,oCAAmB,0BAAYA,WAAW,KAAvB,QAAnB,KAAyE,0BAAYA,WAAW,KAAvB,OAAzE,SAAkI,0BAAYA,WAAW,KAAvB,OAAlI,iHACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,kOAOL,+JACA,kBACE,GAAM,gCADR,gCAGA,iLACA,iGAAgF,0BAAYA,WAAW,KAAvB,YAAhF,wDACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,kPAOL,uMAAsL,0BAAYA,WAAW,KAAvB,SAAtL,0DACA,kBACE,GAAM,iCADR,iCAGA,gPACA,uGAAsF,0BAAYA,WAAW,KAAvB,kBAAtF,UACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,iPAOL,mKACA,uHAAsG,0BAAYA,WAAW,KAAvB,2BAAtG,WAAqL,0BAAYA,WAAW,KAAvB,YAArL,sFACA,kBACE,GAAM,sBADR,sBAGA,6HAA4G,0BAAYA,WAAW,KAAvB,gBAA5G,UACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,+OAOL,sSACA,kBACE,GAAM,oCADR,oCAGA,sGAAqF,0BAAYA,WAAW,KAAvB,mBAArF,KACA,6DAA4C,0BAAYA,WAAW,KAAvB,mBAA5C,QAAgH,0BAAYA,WAAW,KAAvB,6BAAhH,gBACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,wP,mNAWTJ,EAAWY,gBAAiB","file":"component---src-components-build-status-badge-mdx-ed5bff16466d654dd0d5.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-build-status-badge/react-build-status-badge/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from \"docz\";\nimport { BuildStatusBadge } from \"./BuildStatusBadge\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1>BuildStatusBadge</h1>\n    <h2 {...{\n      \"id\": \"description\"\n    }}>{`Description`}</h2>\n    <p>{`A React component that allows you to put a real-time build status badge on your site.`}</p>\n    <p>{`The badge automatically updates as the status changesâ€”no clearing the cache or refreshing the page required.`}</p>\n    <p>{`Just paste in your status badge Markdown and you're ready to go. Additional options are available below.`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { BuildStatusBadge } from \"react-build-status-badge\";\n`}</code></pre>\n    <p>{`You can use a Markdown image link as the child, or can specify the image and link via props.`}</p>\n    <h3 {...{\n      \"id\": \"using-markdown-image-link\"\n    }}>{`Using Markdown Image Link`}</h3>\n    <p>{`The easiest way is to simply paste in your badge Markdown image link, like so:`}</p>\n    <Playground __position={1} __code={'<BuildStatusBadge>\\n  [![Deploy\\n  Status](https://github.com/justinmahar/react-build-status-badge/workflows/Deploy/badge.svg)](https://github.com/justinmahar/react-build-status-badge/actions?query=workflow%3ADeploy)\\n</BuildStatusBadge>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      BuildStatusBadge,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <BuildStatusBadge mdxType=\"BuildStatusBadge\">\n    [![Deploy\n    Status](https://github.com/justinmahar/react-build-status-badge/workflows/Deploy/badge.svg)](https://github.com/justinmahar/react-build-status-badge/actions?query=workflow%3ADeploy)\n  </BuildStatusBadge>\n    </Playground>\n    <small>\n  Note: You can edit the source above. Your changes will be rendered\n  immediately.\n    </small>\n    <br />\n    <br />\n    <p><em parentName=\"p\">{`Tip: Try pasting in your own badge Markdown above to see it in action.`}</em></p>\n    <h3 {...{\n      \"id\": \"using-markdown-image-only-no-link\"\n    }}>{`Using Markdown Image Only (No Link)`}</h3>\n    <p>{`You can also use a Markdown image with no link:`}</p>\n    <Playground __position={4} __code={'<BuildStatusBadge>\\n  ![Tests](https://github.com/justinmahar/react-build-status-badge/workflows/Tests/badge.svg)\\n</BuildStatusBadge>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      BuildStatusBadge,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <BuildStatusBadge mdxType=\"BuildStatusBadge\">\n    ![Tests](https://github.com/justinmahar/react-build-status-badge/workflows/Tests/badge.svg)\n  </BuildStatusBadge>\n    </Playground>\n    <small>\n  Note: You can edit the source above. Your changes will be rendered\n  immediately.\n    </small>\n    <h3 {...{\n      \"id\": \"using-props\"\n    }}>{`Using Props`}</h3>\n    <p>{`Or you can specify everything manually using props:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<BuildStatusBadge\n  href=\"https://github.com/justinmahar/react-build-status-badge/actions\"\n  src=\"https://github.com/justinmahar/react-build-status-badge/workflows/Node.js%20CI/badge.svg\"\n  alt=\"Build Status\"\n/>\n`}</code></pre>\n    <p>{`Note that if you use both Markdown and manual props, the Markdown will override any `}<inlineCode parentName=\"p\">{`href`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`src`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`alt`}</inlineCode>{` props you manually specified.`}</p>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={BuildStatusBadge} mdxType=\"Props\" />\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: Expand each prop for more information.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"markdown-string-child\"\n    }}>{`Markdown String Child`}</h3>\n    <p>{`To have the `}<inlineCode parentName=\"p\">{`href`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`src`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`alt`}</inlineCode>{` props configured automatically, provide a single Markdown string child containing an image or an image link:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<BuildStatusBadge>\n  [![Netlify\n  Status](https://api.netlify.com/api/v1/badges/44e95c68-aa57-4b31-96f3-22877af7a73b/deploy-status)](https://app.netlify.com/sites/react-build-status-badge/deploys)\n</BuildStatusBadge>\n`}</code></pre>\n    <p>{`This is the quickest and easiest way to use a BuildStatusBadge since most CI/CD services provide badges in Markdown. Just paste it in.`}</p>\n    <h2 {...{\n      \"id\": \"changing-the-reload-interval\"\n    }}>{`Changing The Reload Interval`}</h2>\n    <p>{`The build status badge automatically reloads every 5 seconds by default using client-side cache busting. This means it updates in real-time on the page.`}</p>\n    <p>{`You may want to vary how often the badge is updated. You can specify the `}<inlineCode parentName=\"p\">{`interval`}</inlineCode>{` in milliseconds to change the time between reloads:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<BuildStatusBadge interval={3000}>\n  [![Netlify\n  Status](https://api.netlify.com/api/v1/badges/44e95c68-aa57-4b31-96f3-22877af7a73b/deploy-status)](https://app.netlify.com/sites/react-build-status-badge/deploys)\n</BuildStatusBadge>\n`}</code></pre>\n    <p>{`It's probably best not to use anything less than a second (1000 ms) to avoid flooding the badge servers. If you have a very high traffic page, you might want to raise this to `}<inlineCode parentName=\"p\">{`10000`}</inlineCode>{` or higher, or disable automatic reloading altogether.`}</p>\n    <h2 {...{\n      \"id\": \"disabling-automatic-reloading\"\n    }}>{`Disabling Automatic Reloading`}</h2>\n    <p>{`By default, the BuildStatusBadge reloads every 5 seconds. If you have a lot of traffic and want to prevent flooding the badge servers with repeated requests, you might want to disable automatic reloading altogether.`}</p>\n    <p>{`To load and cache the badge only once and disable automatic reloading, use the `}<inlineCode parentName=\"p\">{`reloadDisabled`}</inlineCode>{` prop:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<BuildStatusBadge reloadDisabled>\n  [![Netlify\n  Status](https://api.netlify.com/api/v1/badges/44e95c68-aa57-4b31-96f3-22877af7a73b/deploy-status)](https://app.netlify.com/sites/react-build-status-badge/deploys)\n</BuildStatusBadge>\n`}</code></pre>\n    <p>{`After doing so, the badge will no longer update in real-time, and you may need to clear your browser cache to see the latest build status.`}</p>\n    <p>{`If you want to effectively disable automatic reloading but keep cache-busting enabled, specify `}<inlineCode parentName=\"p\">{`Number.MAX_SAFE_INTEGER`}</inlineCode>{` as the `}<inlineCode parentName=\"p\">{`interval`}</inlineCode>{`. In that case, the latest uncached image will only be downloaded on every render.`}</p>\n    <h2 {...{\n      \"id\": \"disabling-the-link\"\n    }}>{`Disabling The Link`}</h2>\n    <p>{`If you're including a link (for instance in your Markdown) but want to disable rendering it, use the `}<inlineCode parentName=\"p\">{`linkDisabled`}</inlineCode>{` prop:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<BuildStatusBadge linkDisabled>\n  [![Netlify\n  Status](https://api.netlify.com/api/v1/badges/44e95c68-aa57-4b31-96f3-22877af7a73b/deploy-status)](https://app.netlify.com/sites/react-build-status-badge/deploys)\n</BuildStatusBadge>\n`}</code></pre>\n    <p>{`You might want to do this if the page linked to is not available to the public without being authenticated. For example, Netlify sites for private repos require an admin to be logged in to see deploy information. In that case, the link is useless to the general public.`}</p>\n    <h2 {...{\n      \"id\": \"opening-the-link-in-a-new-window\"\n    }}>{`Opening The Link In A New Window`}</h2>\n    <p>{`If you'd like, you can have the badge link open in a new window by specifying `}<inlineCode parentName=\"p\">{`openInNewWindow`}</inlineCode>{`.`}</p>\n    <p>{`When doing so, the link will use the `}<inlineCode parentName=\"p\">{`target=\"_blank\"`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`rel=\"noopener noreferrer\"`}</inlineCode>{` attributes.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<BuildStatusBadge openInNewWindow>\n  [![Netlify\n  Status](https://api.netlify.com/api/v1/badges/44e95c68-aa57-4b31-96f3-22877af7a73b/deploy-status)](https://app.netlify.com/sites/react-build-status-badge/deploys)\n</BuildStatusBadge>\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}